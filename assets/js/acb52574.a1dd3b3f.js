"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[638],{6235:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"concepts/DocumentLoader","title":"Document Loaders","description":"The DocumentLoader provides a unified interface for loading Document Types from various sources.","source":"@site/docs/concepts/DocumentLoader.md","sourceDirName":"concepts","slug":"/concepts/DocumentLoader","permalink":"/langchain-hs/docs/concepts/DocumentLoader","draft":false,"unlisted":false,"editUrl":"https://github.com/tusharad/langchain-hs/docs/concepts/DocumentLoader.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"LLM","permalink":"/langchain-hs/docs/concepts/LLM"},"next":{"title":"Embeddings models","permalink":"/langchain-hs/docs/concepts/Embeddings"}}');var d=o(4848),i=o(8453);const s={sidebar_position:2},t="Document Loaders",a={},l=[{value:"Document",id:"document",level:2},{value:"BaseLoader",id:"baseloader",level:2},{value:"Integrations",id:"integrations",level:2},{value:"Examples",id:"examples",level:2},{value:"DirectoryLoaderOptions",id:"directoryloaderoptions",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"document-loaders",children:"Document Loaders"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"DocumentLoader"})," provides a unified interface for loading ",(0,d.jsx)(n.code,{children:"Document"})," Types from various sources."]}),"\n",(0,d.jsx)(n.h2,{id:"document",children:"Document"}),"\n",(0,d.jsxs)(n.p,{children:["In langchain-hs, a ",(0,d.jsx)(n.code,{children:"Document"})," is a Haskell type with two fields"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"pageContent = The textual content of the document"}),"\n",(0,d.jsxs)(n.li,{children:["metadata = A map of text and ",(0,d.jsx)(n.code,{children:"Value"})," containing extra information about the document. for e.g page number, links."]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Document as Monoid instance, so two documents can be appended together."}),"\n",(0,d.jsx)(n.h2,{id:"baseloader",children:"BaseLoader"}),"\n",(0,d.jsxs)(n.p,{children:["DocumentLoader provides a typeclass called ",(0,d.jsx)(n.code,{children:"BaseLoader"}),". Every BaseLoader should provide implementation of two functions:"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"load"}),"\n",(0,d.jsx)(n.li,{children:"loadAndSplit"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"integrations",children:"Integrations"}),"\n",(0,d.jsx)(n.p,{children:"Right now, langchain-hs provides below integrations, with more integrations planned in the roadmap:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"FileLoader = Load simple text files (uses readFile under the hood)."}),"\n",(0,d.jsxs)(n.li,{children:["PdfLoader = Load pdf files (uses ",(0,d.jsx)(n.a,{href:"pdf-toolbox-document",children:"pdf-toolbox"})," under the hood)."]}),"\n",(0,d.jsxs)(n.li,{children:["DirectoryLoader = Takes a filePath of a directory and ",(0,d.jsx)(n.em,{children:"recursively"})," reads all possible files. You can pass in recursion depth via params."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"FileLoader"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-haskell",children:'{-# LANGUAGE OverloadedStrings #-}\n\nmodule LangchainLib (runApp) where\n\nimport Langchain.DocumentLoader.FileLoader\nimport Langchain.DocumentLoader.Core\n\nrunApp :: IO ()\nrunApp = do\n    let loader = FileLoader "/home/user/haskell/sample-proj/README.md"\n    docs <- load loader\n    chunks <- loadAndSplit loader\n    print docs\n    print chunks\n'})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"PdfLoader"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-haskell",children:'{-# LANGUAGE OverloadedStrings #-}\n\nmodule LangchainLib (runApp) where\n\nimport Langchain.DocumentLoader.Core\nimport Langchain.DocumentLoader.PdfLoader \n\nrunApp :: IO ()\nrunApp = do\n    let loader = PdfLoader  "/home/user/Documents/TS/langchain/SOP.pdf"\n    docs <- load loader\n    chunks <- loadAndSplit loader\n    print docs\n    print chunks\n'})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"DirectoryLoader"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-haskell",children:'{-# LANGUAGE OverloadedStrings #-}\n\nmodule LangchainLib (runApp) where\n\nimport Langchain.DocumentLoader.Core\nimport Langchain.DocumentLoader.DirectoryLoader\n\nrunApp :: IO ()\nrunApp = do\n    let loader = DirectoryLoader { \n        dirPath = "/home/user/Documents/TS/langchain"\n      , directoryLoaderOptions = defaultDirectoryLoaderOptions {\n          recursiveDepth = Just 2\n      }\n    }\n    docs <- load loader\n    chunks <- loadAndSplit loader\n    print docs\n    print chunks\n'})}),"\n",(0,d.jsx)(n.h3,{id:"directoryloaderoptions",children:"DirectoryLoaderOptions"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"recursiveDepth :: Maybe Int = Decide the depth of directory you should go in. The default is unlimited."}),"\n",(0,d.jsx)(n.li,{children:'extensions :: [String] = List of extensions that want to load. For e.g [".txt", ".pdf"]'}),"\n",(0,d.jsx)(n.li,{children:"excludeHidden = Exclude hidden files or folders"}),"\n",(0,d.jsx)(n.li,{children:"useMultithreading = Apply multithreading, default is off."}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"These documents are useful to embed into vector store and build RAG tools."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>t});var r=o(6540);const d={},i=r.createContext(d);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);