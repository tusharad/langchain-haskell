"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[738],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(6540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},8602:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"concepts/Runnable","title":"Runnable","description":"Runnable typeclass provides an interface to define a runnable that can be used in a chain. A runnable is a function that takes an input and produces an output. The Runnable typeclass defines methods for executing the runnable, as well as for managing the metadata associated with the runnable, such as its name and description.","source":"@site/docs/concepts/Runnable.md","sourceDirName":"concepts","slug":"/concepts/Runnable","permalink":"/langchain-hs/docs/concepts/Runnable","draft":false,"unlisted":false,"editUrl":"https://github.com/tusharad/langchain-hs/docs/concepts/Runnable.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Agents","permalink":"/langchain-hs/docs/concepts/Agents"}}');var a=t(4848),i=t(8453);const o={sidebar_position:13},c="Runnable",r={},l=[];function u(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"runnable",children:"Runnable"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Runnable"})," typeclass provides an interface to define a runnable that can be used in a chain. A runnable is a function that takes an input and produces an output. The ",(0,a.jsx)(n.code,{children:"Runnable"})," typeclass defines methods for executing the runnable, as well as for managing the metadata associated with the runnable, such as its name and description.\nThe ",(0,a.jsx)(n.code,{children:"Runnable"})," typeclass is designed to be flexible and extensible, allowing developers to implement their own runnables with custom input and output types. The ",(0,a.jsx)(n.code,{children:"Runnable"})," typeclass is used in conjunction with the ",(0,a.jsx)(n.code,{children:"Chain"})," typeclass to provide a complete solution for building and executing chains of runnables. By implementing the ",(0,a.jsx)(n.code,{children:"Runnable"})," typeclass, developers can create custom runnables that meet their specific needs and requirements."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"'RunnableSequence' - Chain multiple runnables sequentially"}),"\n",(0,a.jsx)(n.li,{children:"'RunnableBranch' - Select different processing branches based on input conditions"}),"\n",(0,a.jsx)(n.li,{children:"'RunnableMap' - Transform inputs or outputs when composing runnables"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Above runnables are used to create complex workflows that require multiple steps and decision-making. Runnables are useful for building chatbots, recommendation systems, and other applications that require a sequence of actions to be performed based on user input or other data."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);