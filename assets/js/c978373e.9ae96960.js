"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[868],{2739:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"concepts/Tool","title":"Tool","description":"Tool typeclass provides an interface to define a tool that can be used in a chain. runTool is a function that takes an input and produces an output. The Tool typeclass defines methods for executing the tool, as well as for managing the metadata associated with the tool, such as its name and description.","source":"@site/docs/concepts/Tool.md","sourceDirName":"concepts","slug":"/concepts/Tool","permalink":"/langchain-hs/docs/concepts/Tool","draft":false,"unlisted":false,"editUrl":"https://github.com/tusharad/langchain-hs/docs/concepts/Tool.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Text Splitter","permalink":"/langchain-hs/docs/concepts/TextSplitter"},"next":{"title":"Agents","permalink":"/langchain-hs/docs/concepts/Agents"}}');var o=t(4848),s=t(8453);const i={sidebar_position:11},l="Tool",r={},c=[{value:"Supported Integrations",id:"supported-integrations",level:2},{value:"Example",id:"example",level:2},{value:"Output",id:"output",level:4},{value:"WikipediaTool Example",id:"wikipediatool-example",level:2},{value:"Output",id:"output-1",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"tool",children:"Tool"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Tool"})," typeclass provides an interface to define a tool that can be used in a chain. runTool is a function that takes an input and produces an output. The ",(0,o.jsx)(n.code,{children:"Tool"})," typeclass defines methods for executing the tool, as well as for managing the metadata associated with the tool, such as its name and description."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Tool"})," typeclass is designed to be flexible and extensible, allowing developers to implement their own tools with custom input and output types. The ",(0,o.jsx)(n.code,{children:"Tool"})," typeclass is used in conjunction with the ",(0,o.jsx)(n.code,{children:"Chain"})," typeclass to provide a complete solution for building and executing chains of tools. By implementing the ",(0,o.jsx)(n.code,{children:"Tool"})," typeclass, developers can create custom tools that meet their specific needs and requirements."]}),"\n",(0,o.jsx)(n.h2,{id:"supported-integrations",children:"Supported Integrations"}),"\n",(0,o.jsx)(n.p,{children:"At this moment, following integrations available,"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"WikipediaTool"}),"\n",(0,o.jsx)(n.li,{children:"WebScraperTool"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-haskell",children:'{-# LANGUAGE OverloadedStrings #-}\n\nmodule ScrapperTool (runApp) where\n\nimport Data.List.NonEmpty (fromList)\nimport Langchain.LLM.Core\nimport Langchain.LLM.Ollama\nimport Langchain.Tool.Core\nimport Langchain.Tool.WebScraper\n\nrunApp :: IO ()\nrunApp = do\n    eRes <- runTool WebScraper "https://tushar-adhatrao.in"\n    case eRes of\n        Left _ -> pure ()\n        Right htmlContent -> do\n            let o = Ollama "qwen3:4b" []\n            e <-\n                chat\n                    o\n                    ( fromList\n                        [ Message\n                            System\n                            ( "Answer questions based on given below scraped html content: "\n                                <> htmlContent\n                            )\n                            defaultMessageData\n                        , Message\n                            User\n                            "Who is Tushar? /no_think"\n                            defaultMessageData\n                        ]\n                    )\n                    Nothing\n            print e\n'})}),"\n",(0,o.jsx)(n.h4,{id:"output",children:"Output"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'Right "<think>\\n\\n</think>\\n\\nTushar is a friendly neighborhood functional programmer. He is known for his skills in areas such as Haskell, PostgreSQL, Docker, GraphQL, Kubernetes, and GCP. He is currently learning or interested in Rust, Web Assembly, and Large Language Models (LLMs). You can find more about him on his LinkedIn profile, GitHub, and contact him via email."\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["Ollama's default context is quite ",(0,o.jsx)(n.a,{href:"https://github.com/ollama/ollama/blob/main/docs/faq.md#how-can-i-specify-the-context-window-size",children:"small"}),". You can increase the window size by passing num_ctx in option parameter."]})}),"\n",(0,o.jsx)(n.h2,{id:"wikipediatool-example",children:"WikipediaTool Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-haskell",children:'{-# LANGUAGE OverloadedStrings #-}\n\nmodule WikipediaQA (runApp, askQuestion) where\n\nimport Data.Aeson\nimport qualified Data.List.NonEmpty as NE\nimport Langchain.Callback (stdOutCallback)\nimport Langchain.LLM.Core\nimport Langchain.LLM.Ollama\nimport Langchain.Tool.Core (Tool (runTool))\nimport Data.Text\nimport Langchain.Tool.WikipediaTool\n\ndata Conversation = Conversation\n  { llm :: Ollama\n  , messages :: NE.NonEmpty Message\n  }\n\ninitConversation :: Text -> IO Conversation\ninitConversation topic = do\n  let ollamaLLM =\n        Ollama\n          { modelName = "qwen3:4b"\n          , callbacks = [stdOutCallback]\n          }\n  let wTool =\n        defaultWikipediaTool\n          { docMaxChars = 5000\n          }\n  wikiContent <- runTool wTool topic\n  let initialMessages =\n        NE.fromList\n          [ Message\n              System\n              ( "You are a helpful assistant, answer user\'s query based on below wikipedia content: "\n                  <> wikiContent\n              )\n              defaultMessageData\n          ]\n  pure $ Conversation ollamaLLM initialMessages\n\naskQuestion :: Conversation -> Text -> IO (Either String Text, Conversation)\naskQuestion conv question = do\n  let newMessages = messages conv <> NE.fromList [Message User question defaultMessageData]\n  eRes <- chat\n    (llm conv)\n    newMessages\n    ( Just $\n        defaultOllamaParams\n          { options = Just (object [("num_ctx", Number 10000)])\n          }\n    )\n  case eRes of\n    Left err -> pure (Left err, conv { messages = newMessages })\n    Right answer -> do\n      let updatedMessages = newMessages <> NE.fromList [Message Assistant answer defaultMessageData]\n      pure (Right answer, conv { messages = updatedMessages })\n\nrunApp :: IO ()\nrunApp = do\n  conv <- initConversation "Superman_(2025_film)"\n  (res1, conv1) <- askQuestion conv "When is James Gunn\'s superman releasing? /no_think"\n  case res1 of\n    Left _ -> pure ()\n    Right r -> print r\n  (res2, _) <- askQuestion conv1 "Who is the lead actor in it? /no_think"\n  print res2\n'})}),"\n",(0,o.jsx)(n.h4,{id:"output-1",children:"Output"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'Model operation started\nModel completed with\n"<think>\\n\\n</think>\\n\\nJames Gunn\'s Superman film is scheduled to be released theatrically in the United States on **July 11, 2025**."\nModel operation started\nModel completed with\nRight "<think>\\n\\n</think>\\n\\nThe lead actor in James Gunn\'s *Superman* is **David Corenswet**, who plays Clark Kent / Superman."\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var a=t(6540);const o={},s=a.createContext(o);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);