"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[686],{7830:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"langchain-hs Documentation","href":"/langchain-hs/docs/","docId":"index","unlisted":false},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Quickstart: Langchain-hs","href":"/langchain-hs/docs/getting-started/quick_start","docId":"getting-started/quick_start","unlisted":false}],"href":"/langchain-hs/docs/category/getting-started"},{"type":"category","label":"Concepts and examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"LLM","href":"/langchain-hs/docs/concepts/LLM","docId":"concepts/LLM","unlisted":false},{"type":"link","label":"Document Loaders","href":"/langchain-hs/docs/concepts/DocumentLoader","docId":"concepts/DocumentLoader","unlisted":false},{"type":"link","label":"Embeddings models","href":"/langchain-hs/docs/concepts/Embeddings","docId":"concepts/Embeddings","unlisted":false},{"type":"link","label":"Memory","href":"/langchain-hs/docs/concepts/Memory","docId":"concepts/Memory","unlisted":false},{"type":"link","label":"Output Parser","href":"/langchain-hs/docs/concepts/OutputParser","docId":"concepts/OutputParser","unlisted":false},{"type":"link","label":"Callbacks","href":"/langchain-hs/docs/concepts/Callback","docId":"concepts/Callback","unlisted":false},{"type":"link","label":"Prompt Template","href":"/langchain-hs/docs/concepts/PromptTemplate","docId":"concepts/PromptTemplate","unlisted":false},{"type":"link","label":"VectorStore","href":"/langchain-hs/docs/concepts/VectorStore","docId":"concepts/VectorStore","unlisted":false},{"type":"link","label":"Retriever","href":"/langchain-hs/docs/concepts/Retriever","docId":"concepts/Retriever","unlisted":false},{"type":"link","label":"Text Splitter","href":"/langchain-hs/docs/concepts/TextSplitter","docId":"concepts/TextSplitter","unlisted":false},{"type":"link","label":"Tool","href":"/langchain-hs/docs/concepts/Tool","docId":"concepts/Tool","unlisted":false},{"type":"link","label":"Agents","href":"/langchain-hs/docs/concepts/Agents","docId":"concepts/Agents","unlisted":false},{"type":"link","label":"Runnable","href":"/langchain-hs/docs/concepts/Runnable","docId":"concepts/Runnable","unlisted":false}],"href":"/langchain-hs/docs/category/concepts-and-examples"},{"type":"link","label":"Hackage documentation","href":"https://hackage.haskell.org/package/langchain-hs"}]},"docs":{"concepts/Agents":{"id":"concepts/Agents","title":"Agents","description":"Agents module provides a mechanism to create and manage agents. An agent is a type of chain that can take an action based on the output of a previous action. Agents are useful for building complex workflows that require multiple steps and decision-making.","sidebar":"tutorialSidebar"},"concepts/Callback":{"id":"concepts/Callback","title":"Callbacks","description":"Callbacks are a powerful feature in Langchain that allow you to monitor and control the execution of your chains, agents, and tools. They provide a way to receive updates about the progress of your operations, log information, and even modify the behavior of your chains on-the-fly.","sidebar":"tutorialSidebar"},"concepts/DocumentLoader":{"id":"concepts/DocumentLoader","title":"Document Loaders","description":"The DocumentLoader provides a unified interface for loading Document Types from various sources.","sidebar":"tutorialSidebar"},"concepts/Embeddings":{"id":"concepts/Embeddings","title":"Embeddings models","description":"Embeddings typeclass provides interface over various Embeddings models.","sidebar":"tutorialSidebar"},"concepts/LLM":{"id":"concepts/LLM","title":"LLM","description":"The LLM typeclass is the cornerstone of langchain-hs. It provides a unified interface for:","sidebar":"tutorialSidebar"},"concepts/Memory":{"id":"concepts/Memory","title":"Memory","description":"In langchain-hs, Memory module provides a BaseMemory typeclass. The goal is provide types with","sidebar":"tutorialSidebar"},"concepts/OutputParser":{"id":"concepts/OutputParser","title":"Output Parser","description":"OutputParser typeclass provides an interface that parses Text (usually LLM output) into desired type.","sidebar":"tutorialSidebar"},"concepts/PromptTemplate":{"id":"concepts/PromptTemplate","title":"Prompt Template","description":"Prompt templates are a powerful feature in Langchain that allow you to create dynamic prompts for your language models. They enable you to define a template with placeholders that can be filled with specific values at runtime, making it easy to generate customized prompts for different use cases.","sidebar":"tutorialSidebar"},"concepts/Retriever":{"id":"concepts/Retriever","title":"Retriever","description":"Retriever typeclass provides an interface to retrieve documents from a collection. It is used in conjunction with the VectorStore typeclass to retrieve documents based on their embeddings. The Retriever typeclass defines methods for retrieving documents based on their IDs, distances, and other criteria.","sidebar":"tutorialSidebar"},"concepts/Runnable":{"id":"concepts/Runnable","title":"Runnable","description":"Runnable typeclass provides an interface to define a runnable that can be used in a chain. A runnable is a function that takes an input and produces an output. The Runnable typeclass defines methods for executing the runnable, as well as for managing the metadata associated with the runnable, such as its name and description.","sidebar":"tutorialSidebar"},"concepts/TextSplitter":{"id":"concepts/TextSplitter","title":"Text Splitter","description":"TextSplitter typeclass provides an interface to split text into smaller chunks. This is useful for processing large texts, such as documents or articles, into manageable pieces.","sidebar":"tutorialSidebar"},"concepts/Tool":{"id":"concepts/Tool","title":"Tool","description":"Tool typeclass provides an interface to define a tool that can be used in a chain. runTool is a function that takes an input and produces an output. The Tool typeclass defines methods for executing the tool, as well as for managing the metadata associated with the tool, such as its name and description.","sidebar":"tutorialSidebar"},"concepts/VectorStore":{"id":"concepts/VectorStore","title":"VectorStore","description":"VectorStore is a typeclass that provides an interface for storing and retrieving vectors. It is used in Langchain to manage the storage and retrieval of embeddings generated by various models. The VectorStore typeclass defines methods for adding, searching, and deleting vectors from the store.","sidebar":"tutorialSidebar"},"getting-started/quick_start":{"id":"getting-started/quick_start","title":"Quickstart: Langchain-hs","description":"Requirements","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"langchain-hs Documentation","description":"Welcome to langchain-hs","sidebar":"tutorialSidebar"}}}}')}}]);