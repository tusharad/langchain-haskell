"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[774],{6033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"concepts/VectorStore","title":"VectorStore","description":"VectorStore is a typeclass that provides an interface for storing and retrieving vectors. It is used in Langchain to manage the storage and retrieval of embeddings generated by various models. The VectorStore typeclass defines methods for adding, searching, and deleting vectors from the store.","source":"@site/docs/concepts/VectorStore.md","sourceDirName":"concepts","slug":"/concepts/VectorStore","permalink":"/langchain-hs/docs/concepts/VectorStore","draft":false,"unlisted":false,"editUrl":"https://github.com/tusharad/langchain-hs/docs/concepts/VectorStore.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Prompt Template","permalink":"/langchain-hs/docs/concepts/PromptTemplate"},"next":{"title":"Retriever","permalink":"/langchain-hs/docs/concepts/Retriever"}}');var r=n(4848),s=n(8453);const i={sidebar_position:8},a="VectorStore",c={},d=[{value:"Supported Integrations",id:"supported-integrations",level:2}];function l(e){const t={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"vectorstore",children:"VectorStore"})}),"\n",(0,r.jsx)(t.p,{children:"VectorStore is a typeclass that provides an interface for storing and retrieving vectors. It is used in Langchain to manage the storage and retrieval of embeddings generated by various models. The VectorStore typeclass defines methods for adding, searching, and deleting vectors from the store.\nIt also provides methods for managing the metadata associated with the vectors, such as their IDs and distances.\nThe VectorStore typeclass is designed to be flexible and extensible, allowing developers to implement their own vector stores with custom storage backends and retrieval algorithms.\nThe VectorStore typeclass is used in conjunction with the Embeddings typeclass to provide a complete solution for managing and retrieving embeddings in Langchain. By implementing the VectorStore typeclass, developers can create custom storage solutions that meet their specific needs and requirements."}),"\n",(0,r.jsx)(t.h2,{id:"supported-integrations",children:"Supported Integrations"}),"\n",(0,r.jsx)(t.p,{children:"At this moment, following integrations available,"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Ollama"}),"\n",(0,r.jsx)(t.li,{children:"More to come..."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);