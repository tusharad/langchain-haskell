"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[38],{7952:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>t,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"concepts/Embeddings","title":"Embeddings models","description":"Embeddings typeclass provides interface over various Embeddings models.","source":"@site/docs/concepts/Embeddings.md","sourceDirName":"concepts","slug":"/concepts/Embeddings","permalink":"/langchain-hs/docs/concepts/Embeddings","draft":false,"unlisted":false,"editUrl":"https://github.com/tusharad/langchain-hs/docs/concepts/Embeddings.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Document Loaders","permalink":"/langchain-hs/docs/concepts/DocumentLoader"},"next":{"title":"Memory","permalink":"/langchain-hs/docs/concepts/Memory"}}');var o=s(4848),i=s(8453);const t={sidebar_position:3},r="Embeddings models",c={},a=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"embeddings-models",children:"Embeddings models"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Embeddings"})," typeclass provides interface over various Embeddings models."]}),"\n",(0,o.jsx)(n.p,{children:"As of now, below models are provided out of the box:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"OllamaEmbeddings"}),"\n",(0,o.jsx)(n.li,{children:"OpenAIEmbeddings"}),"\n"]}),"\n",(0,o.jsx)(n.h1,{id:"example-for-openai-embeddings",children:"Example for OpenAI Embeddings"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-haskell",children:'{-# LANGUAGE OverloadedStrings #-}\n\nmodule LangchainLib (runApp) where\n\nimport Langchain.Embeddings.OpenAI\nimport Langchain.Embeddings.Core\nimport Langchain.DocumentLoader.Core\nimport Langchain.DocumentLoader.PdfLoader\n\nrunApp :: IO ()\nrunApp = do\n  let oEmbed = defaultOpenAIEmbeddings {\n    apiKey = "api-key"\n  }\n  let p = PdfLoader "/home/user/Documents/langchain/SOP.pdf"\n  eDocs <- load p\n  case eDocs of\n    Left err -> error err\n    Right docs -> do \n      eRes <- embedDocuments oEmbed docs\n      print eRes\n'})}),"\n",(0,o.jsx)(n.h1,{id:"custom-embedding-model",children:"Custom embedding model"}),"\n",(0,o.jsx)(n.p,{children:"It is also possible to create your own type and implement Embeddings typeclass."}),"\n",(0,o.jsx)(n.p,{children:"for e.g"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-haskell",children:"data DeepseekEmbedding = DeepseekEmbedding {\n  apiKey :: Text,\n  apiUrl :: Text,\n  model :: Text\n}\n\ninstance Embeddings Deepseek where\n  embedDocuments OpenAIEmbedding docs = do\n    -- Your implementation here\n    return $ Right []\n  embedQuery OpenAIEmbedding{..} query = do\n    -- Your implementation here\n    return $ Right []\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>r});var d=s(6540);const o={},i=d.createContext(o);function t(e){const n=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),d.createElement(i.Provider,{value:n},e.children)}}}]);