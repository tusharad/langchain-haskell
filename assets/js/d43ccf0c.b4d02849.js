"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[405],{6468:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"concepts/Retriever","title":"Retriever","description":"Retriever typeclass provides an interface to retrieve documents from a collection. It is used in conjunction with the VectorStore typeclass to retrieve documents based on their embeddings. The Retriever typeclass defines methods for retrieving documents based on their IDs, distances, and other criteria.","source":"@site/docs/concepts/Retriever.md","sourceDirName":"concepts","slug":"/concepts/Retriever","permalink":"/langchain-hs/docs/concepts/Retriever","draft":false,"unlisted":false,"editUrl":"https://github.com/tusharad/langchain-hs/docs/concepts/Retriever.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"VectorStore","permalink":"/langchain-hs/docs/concepts/VectorStore"},"next":{"title":"Text Splitter","permalink":"/langchain-hs/docs/concepts/TextSplitter"}}');var s=r(4848),i=r(8453);const o={sidebar_position:9},c="Retriever",a={},d=[{value:"Supported Integrations",id:"supported-integrations",level:2},{value:"Custom Retriever",id:"custom-retriever",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"retriever",children:"Retriever"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Retriever"})," typeclass provides an interface to retrieve documents from a collection. It is used in conjunction with the ",(0,s.jsx)(t.code,{children:"VectorStore"})," typeclass to retrieve documents based on their embeddings. The ",(0,s.jsx)(t.code,{children:"Retriever"})," typeclass defines methods for retrieving documents based on their IDs, distances, and other criteria."]}),"\n",(0,s.jsxs)(t.p,{children:["It also provides methods for managing the metadata associated with the documents, such as their IDs and distances. The ",(0,s.jsx)(t.code,{children:"Retriever"})," typeclass is designed to be flexible and extensible, allowing developers to implement their own retrievers with custom retrieval algorithms and criteria."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"_get_relevant_documents"})," method is used to retrieve documents based on their embeddings. It takes a query and returns a list of relevant documents. The ",(0,s.jsx)(t.code,{children:"Retriever"})," typeclass is used in conjunction with the ",(0,s.jsx)(t.code,{children:"VectorStore"})," typeclass to provide a complete solution for managing and retrieving embeddings in Langchain. By implementing the ",(0,s.jsx)(t.code,{children:"Retriever"})," typeclass, developers can create custom retrieval solutions that meet their specific needs and requirements."]}),"\n",(0,s.jsx)(t.h2,{id:"supported-integrations",children:"Supported Integrations"}),"\n",(0,s.jsx)(t.p,{children:"At this moment, following integrations available,"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Ollama"}),"\n",(0,s.jsx)(t.li,{children:"More to come..."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"custom-retriever",children:"Custom Retriever"}),"\n",(0,s.jsxs)(t.p,{children:["It is also possible to create your own type and implement ",(0,s.jsx)(t.code,{children:"Retriever"})," typeclass."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-haskell",children:"data CustomRetriever = CustomRetriever {\n  apiKey :: Text,\n    apiUrl :: Text,\n    model :: Text\n}\ninstance Retriever CustomRetriever where\n  _get_relevant_documents (CustomRetriever apiKey apiUrl model) query = do\n    -- Your implementation here\n    return $ Right []\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>c});var n=r(6540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);